https://docs.aws.amazon.com/cli/latest/userguide/cli-services-ec2-instances.html

sudo less /var/log/cloud-init.log -- to check any issues while creating VM like user-data failures

AWS account using N-virginia
allow-all security group
Hosted zone
A records
IAM user
Parameter store

s3 bucket -- to store terraform lock file remotely instead of local
DynamoDB  -- for locking the state file

VPC
CIDR - VPC has a number i.e.r CIDR
CIDR --> Classless inter domain routing
Subnet
Public subnet -- will have route to the Internet gateway
Internet Gateway igw --> to provide internet connection to VPC
Private Subnet -- will NOT have route to the Internet gateway
NAT Gateway  -- to provide internet access to servers in private subnet
Elastic IP(static IP) -- required for NAT Gateway creation

IGW - if traffic coming internet to server --> ingress
NAT - if server is sending traffic to internet --> egress
route tables
routes

VPC peering -- preferred if the VPC is in same account
Transit Gateway -- preferred if the VPC is in different account or on premise
Bastion 
Load Balancer
Target Groups
Listener
Rule
AutoScaling
Launch Template
VPN
RDS(Mysql DB Setup) using AWS
ACM -- AWS certificate Manager

how to resize aws ebs volumes
EBS


VPC and subnets Creation
---------------------------------------------------------------------------------
create VPC with CIDR 10.0.0.0/16
Create IGW(Internet gateway) and attach to VPC

Create 2 public subnets in 2 regions i.e., 1a and 1b
Create 2 private subnets in 2 regions
Create 2 Database(private) subnets in 2 regions 
Note: Private and Database are private subnets only

Create route table for public subnets with vpc and add public subnets
Create route table for private subnets with vpc and add private subnets
Create route table for Database subnets with vpc and add database subnets

Edit public route table and add routes with 0.0.0.0/0 with Internet Gateway --- then only it will become public subnet
public subnet will have route to the Internet gateway
Private subnet will not have route to the Internet gateway

Create Elastic IP(Static IP) for NAT Gateway
Create NAT Gateway with Public Subnet and Elastic IP

Edit private(Database) route table and add routes with 0.0.0.0/0 with NAT Gateway --- then only it will become private subnet

subnets will automatically have access between them

VPC peering connection
-----------------------
create peering connection with your vpc as requestor and default-vpc(Any other VPC) as acceptor
Acceptor will accept the request

update the routetable with destination as CIDR of acceptor i.e., default-vpc and Target as peering connection

Similarly Update the Other VPC(default-vpc) route table also with our VPC CIDR


VPC --> 10.0.0.0/16
IGW --> Attach to VPC
Public subnets --> 10.0.1.0/24 10.0.2.0/24
Public Subnets --> Public Route --> 0.0.0.0/0 --> IGW

Private Subnets --> 10.0.11.0/24 10.0.12.0/24
Private Subnets --> Private Route --> 0.0.0.0/0 --> NAT

Database Subnets --> 10.0.21.0/24 10.0.22.0/24
Database Subnets --> Database Route --> 0.0.0.0/0 --> NAT

NAT --> if you want to enable egress internet to the servers in private subnet, you should create NAT gateway in public subnet and provide route to private subnets
if traffic coming to server --> ingress
if server is sending traffic to internet --> egress


To hit/access load balancer we need to allow bastion IP and port in Private(APP) Load balancer inbound security group rule
But Bastion host IP may change so instead of bastion IP we will allow access from Bastion security group
so all the instances with Bastion security group will have access to ALB irresepctive of IP


--------------------------------------------QUESTIONS-------------------------------------------------------------
In AWS load balancer why we cannot create listener with fixed response from AWS (always have to provide target group)
while it is possible in Terraform to provide fixed response(without target group)


*.app-dev.daws82s.online --> BAckend ALB
	fdhasdkfh.app-dev.daws82s.online --> Yes Iam LB (default fixed response)
	http://backend.app-dev.daws82s.online --> forward that to backend target group
	
	