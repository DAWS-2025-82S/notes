Docker version 28.0.1, build 068a01e

DockerHub:

Docker ID : dath1
brajasekharreddy@chn.aithent.com
DathHub12!@

Docker installation
Adding user to the docker group

Install in RHEL 9
------------------
sudo dnf -y install dnf-plugins-core
sudo dnf config-manager --add-repo https://download.docker.com/linux/rhel/docker-ce.repo

sudo dnf install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

Install specific version
-------------------------
dnf list docker-ce --showduplicates | sort -r

docker-ce.x86_64    3:28.0.1-1.el9    docker-ce-stable
docker-ce.x86_64    3:28.0.0-1.el9    docker-ce-stable

Install a specific version by its fully qualified package name, 
which is the package name (docker-ce) plus the version string (2nd column), separated by a hyphen (-). For example, docker-ce-3:28.0.1-1.el9

sudo dnf install docker-ce-<VERSION_STRING> docker-ce-cli-<VERSION_STRING> containerd.io docker-buildx-plugin docker-compose-plugin

Install in Ubuntu
--------------------
sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

docker install --> docker group created by default
	usermod -aG docker ec2-user
logout and login
If you're running Linux in a virtual machine, it may be necessary to restart the virtual machine for changes to take effect.

You can also run the following command to activate the changes to groups:	

newgrp docker 

Docker file instructions
-------------------------
FROM --> should be the first instruction to represent base OS
RUN --> Used to configure or install packages
CMD --> executes at the time of container creation, this command should container running infinite time
COPY --> copies from local workspace to image
ADD --> same as copy but 2 extra capabilities, directly downloads from internet or untar directly
LABEL --> adds metadata, used for filter. key value pairs
EXPOSE --> doc purpose, tell the users about ports opened by container
ENV --> sets the env variables in the container, we can use at build time also
ENTRYPOINT --> cant' override, CMD can provide default args, we can always override default args
USER --> set the user to run container
WORKDIR --> sets the working directory for container/image
ARG --> build time variables, in an exceptional case can be first instruction to supply base os version


docker images --> displays the images available

docker pull image-name  --- to download latest image from dockerhub
docker pull image-name:tag/version -- specific tag/version

docker images -a -q -- to get all images ids
docker rmi <Image-id/name> -- delete Image
docker rmi `docker images -a -q` -- to delete all images

docker ps --> displays running containers
docker ps -a --> displays all containers(runnin+stopped)
docker ps -a -q -- get all containers ids

docker ps -a --no-trunc  -- get see the full command executed


docker create <image> --> container will be created
docker create -p 90:80 nginx:alpine -- create container and expose port 90 which will map to 80 container port

docker start <container-id> -- to start the created container
docker stop <container-id> -- to stop the running container
docker kill <container-id> -- to kill the running container

docker pause <container-id> -- to pause the process in the running container
docker unpause <container-id> -- to unpause the process in the running container


docker rm <container-id>  -- delete stopped container
docker rm -f <container-id> -- delete running container
docker rm `docker ps -a -q` -- delete all containers
docker rm -f `docker ps -a -q` -- delete all containers

 docker container prune -- delete all stopped containers

docker exec -it 1e74ed63d8d6 bash -- to connect to container and get  the interactive terminal/bash access
 
docker pull + create + start == docker run
docker run nginx
docker run -d nginx -- to run container in detached mode

Container will also have 65,535 ports
docker run -p host-port:container-port  --- docker will open host port and forward request to container

docker inspect -- to get container details
docker logs -- to check the container logs

docker inspect <ImageName> -- to get image information
------------------Ubuntu image--------------------
 docker run -it ubuntu bash -- it will run ubuntu image and provide the bash command prompt
 if you give exit the conatiner will also stop
 to exit without stopping container with ubuntu iamge 
 use CTRL+pq instead of exit
 
 docker run -itd ubuntu  -- to run the container without stopping
 
 The below commands will create container but container will not run
 docker run ubuntu
 docker run -d ubuntu
 --------------------------------------------------------
 
Pushing a Docker container image to Docker HubðŸ”—
------------------------------------------------

https://docs.docker.com/engine/reference/commandline/push/

https://docs.docker.com/docker-hub/repos/

docker login -u dath1  -- login to dockerhub 
docker tag raj/ubuntu-nodejs dath1/ubuntu-nodejs  -- tag the image with dockerhub username or build with dockerhub username
docker build -t <docker-hub-username>/<image-name>:<version> .

docker push dath1/ubuntu-nodejs

docker push dath1/ubuntu-nodejs:2

TO push all tags
-----------------
 docker image push --all-tags dath1/ubuntu-nodejs

----------------------------------------------------------------------------------------------------------------------------
docker build -t from:1.0.0 . -- build image

docker build -t dath1/from:1.0.0 . -- build with docker hub username

docker build -t from:1.0.0 . -f Test.Dockerfile -- with different docker file name

RUN
======
RUN instruction used to install packages, configurations on top of base os. It executes at the time of image building

container will exit if the command is "/bin/bash"
To run the container continuously wihout exit we have to provide the command using CMD instruction

docker build -t run:1.0.0 .
docker run -d run:1.0.0 -- container will exit

docker run -itd run:1.0.0 -- container will not exit
docker ps

CMD
======
systemctl will not work in containers.. /etc/systemd/system/*.service

docker build -t cmd:1.0.0 .
docker run -d cmd:1.0.0 -- container will not exit because of cmd command of nginx
docker ps

docker run -d -p 8080:80 cmd:1.0.0

Container will also have 65,535 ports

RUN vs CMD
=========
RUN instruction executes at the time of image building
CMD instruction executes at the time of container creation

COPY vs ADD
=========
COPY and ADD both copies the files to images. but ADD has 2 extra capabilities
1. copying from directly from internet to the image
2. extracts tar file directly into image

docker build -t copy:1.0.0 .
docker run -d -p 8080:80 copy:1.0.0
docker ps

docker build -t add:1.0.0 .
docker run -d -p 8080:80 add:1.0.0
docker ps

LABEL -- adds metadata to the image but can be used in filteration

docker build -t label:1.0.0 .
docker images -f "LABEL=project=expense"

EXPOSE -- let the users know/provide the info the ports container listens  but it will not open any port
docker build -t expose:1.0.0 .
docker inspect expose:1.0.0

ENV -- sets the environment variables

To check the env variables connect to container using exec command and give "env" command to list all environment variables

docker build -t env:1.0.0 .
docker run -d env:1.0.0  -- container will exit
docker run -d env:1.0.0 sleep 30 -- use sleep to stop the container exit

docker run -itd env:1.0.0 -- container will not exit
docker exec -it e01aceb bash
env

CMD vs ENTRYPOINT
==================
1. CMD instruction can be overriden
2. You can't override ENTRYPOINT --> ping google.com ping facebook.com. If you try to override entrypoint it will not override, but it will append
3. for best results we can use CMD and ENTRYPOINT together.
4. We can mention command in ENTRYPOINT, default options/inputs can be supplied through CMD. User can always override default options.
5. Only one CMD and one ENTRYPOINT should be used in Dockerfile

docker build -t entry:1.0.0 .
docker run entry:1.0.0 ping facebook.com

docker build -t entry:1.0.0 . -f entry-1.Dockerfile
docker run entry:1.0.0
docker ps -a --no-trunc
docker run entry:1.0.0 ping facebook.com


USER -> set the user of container -- this will not give the root user access
docker build -t user:1.0.0 .
docker run -d user:1.0.0

WORKDIR --> set the working directory of container/image

docker build -t work:1.0.0 .
docker run -d work:1.0.0

# docker build -t work:1.0.0 . --debug --no-cache --progress=plain

ARG
------
1. ENV variables can be access at the image building and in container also
2. ARG variables are only accessed inside image build, not in container
3. ARG can be the first instruction only to provide the version for base image. It can't be useful after FROM instruction

set the ARG value to ENV variable inside Dockerfile

docker build -t arg:1.0.0  . -f 02-ARG.Dockerfile
docker run -d arg:1.0.0  .

 to override the ARG in docker file use --build-arg
docker build -t arg:1.0.0 --progress=plain --no-cache --build-arg USERNAME=TestUser . -f 02-ARG.Dockerfile

The ARG before FROM can be accessed in FROM only and it cannot be accessed after FROM

docker build -t arg:1.0.0 --progress=plain --no-cache --build-arg USERNAME=TestUser --build-arg version=8 . -f 03-ARG.Dockerfile

 To access the ARG value inside container set the ARG value to ENV variable inside Dockerfile
 

ONBUILD
=======
we can set some conditions when some user is using our image

nginx --> alamlinux:9, install nginx, removes index.html

we will force the users to keep index.html in their workspace for mandatory

docker build -t onbuild:1.0.0 .
docker build -t onbuild-test:1.0.0 .

Expense Project setup using docker
----------------------
set up mysql 
------------
Use mysql official image 8.0 version

https://hub.docker.com/_/mysql

Download the script from expense documentation link and add it in project 18-expense-docker

docker build -t mysql:1.0.0 .
docker run -d --name mysql mysql:1.0.0

ifconfig

docker exec -it mysql bash
mysql -u root -pExpenseApp@1
show databases;
use transactions;
show tables;

For each modem there is Ip address and ISP provides external IP and the modem will assign a Ip address for each device connected to it

ifconfig

Similarly at the time of docker installation docker creates its own network and docker creates virtual modem and it has Ip address 
and it will assgin a Ip for each container

# ifconfig
# docker inspect mysql  # to get container IP

setup backend i.e., nodejs app
-------------------------------
Download the code from expense documentation link and add it in project 18-expense-docker

# set DB_HOST="msql container name" because the container IP changes if contianer is restarted

docker build -t backend:1.0.0 .
docker run -d --name backend backend:1.0.0

backend app cannot connect to mysql DB because of docker default network 

if you are using default n/w docker containers can't communicate with each other

For containers to communicate we need to create network 

docker network create expense
docker network ls

There are 2 types of nettworks in docker bridge and host
default network is bridge

disconnect the containers from default network and add them to the network created

docker network disconnect <NetworkName> <ContainerName>
docker network connect <NetworkName> <ContainerName>

docker network disconnect bridge mysql
docker network connect expense mysql

ifconfig

[ ec2-user@ip-172-31-43-15 ~/18-expense-docker/02-backend ]$ ifconfig
br-c54a2cf8ef81: flags=4099<UP,BROADCAST,MULTICAST>  mtu 1500
        inet 172.18.0.1  netmask 255.255.0.0  broadcast 172.18.255.255
        ether 1a:d9:f9:a8:33:d6  txqueuelen 0  (Ethernet)
        RX packets 3  bytes 126 (126.0 B)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 27  bytes 1910 (1.8 KiB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

docker0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet 172.17.0.1  netmask 255.255.0.0  broadcast 172.17.255.255
        inet6 fe80::6ca0:7cff:fec3:611  prefixlen 64  scopeid 0x20<link>
        ether 6e:a0:7c:c3:06:11  txqueuelen 0  (Ethernet)
        RX packets 1121  bytes 145802 (142.3 KiB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 1207  bytes 3997435 (3.8 MiB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0
		
docker0 -- network created by docker at the time of installation
br-c54a2cf8ef81 -- network created with "docker network create" command	

docker rm backend
docker run -d --name backend --network expense backend:1.0.0  # run the container with expense network
docker inspect backend

docker exec -it backend bash
telnet mysql 3306

set up frontend
----------------
Download the code from expense documentation link and add it in project 18-expense-docker

docker build -t frontend:1.0.0 .
docker run -d -p 80:80 --name frontend --network expense frontend:1.0.0

docker exec -it frontend bash
cat /etc/nginx/nginx.conf





docker build -t work:1.0.0 . --debug --no-cache --progress=plain
---------Docker Questions---------------------------------------------------------------------------------------------
cd command with RUN instruction failed we have to use use WORKDIR
How to find the image created has issues


