session 01 
-------------------------------------------------------------------------------------------------------------------------------
What is DevOps?
Waterfall vs Agile vs DevOps
SDLC

create organisation in Github
create repo in  new org in github
create folder with 82s and create folder with repo name locally
Execute the below commands to  intialise repo in local and push to remote
--------------------------------------------------------------------------
git init
git branch -M main
git remote add origin https://github.com/DAWS-2025-82S/notes.git
git add .
git commit -m "session-01"
git push origin main

For author identity configure below
------------------------------------
git config --global user.email "rajasekharb974@gmail.com"
git config --global user.name "rajasekhar"

To unstage a new file after using git add . use the command below
git rm --cached DAWS-82S-notes.txt

Before commiting the changes if the file is modified again after git add . then to revert the changes made, use the command below
 git restore DAWS-82S-notes.txt		---  to discard changes in working directory
 git add .							--- to include the file changes
 
 git restore --staged DAWS-82S-notes.txt  -- to unstage the already existing file in staging area

Test updated in github
-------------------------------------------------------------------------------------------------------------------------------------------------
session 02 
-------------------------------------------------------------------------------------------------------------------------------------------------
What is a Computer?
Client Server Architecture

AWS account with N-virginia region because of less cost
AWS AMI setup
AWS security group --- allow-all
Allow all Inbound and outbound
AWS Instance with devops-practice image

Linus Torvalds  -- Inventor of linux
Linux kernel
Linux -> C language == Kernel 
OS == Kernel + User Interface == Open Source

Authentication mechanisms
What you know --> Username and Password
What you have --> Username and token/OTP
What you are --> Fingerprints, Retina, Palm, etc.

Git bash Installation

Public key and Private key

public key -- copied to the server
Private key -- shared only with the users who need access, not to all

Lock and Key 
Lock --> Public 
Key --> Private

ssh-keygen -f <filename>

Server == IP(Public)

Enable file extensions in windows
ControlPanel--->FileExplorer--->Uncheck option Hide extensions

keyPairs---> Import keypairs in AWS



-------------------------------------------------------------------------------------------------------------------------------------------------
session 08 
-------------------------------------------------------------------------------------------------------------------------------------------------
DNS 
How DNS works

Browser--->OS-->ISP(DNS Resolver)-->ICANN(RootServer)-->TLD Server-->NameServer

ICANN --> Internet Corporation for assigned names and numbers --> countries, reputed organistions
ICANN maintains root servers

there are 13 root servers in the world
https://www.iana.org/domains/root/servers

top level domains(ICANN root servers will have this top level domain)
.telugu , .com , .in , .uk, .net, .edu, .gov, .us, .au, .org, .ai, .online

.gov.in, .co.in --> sub level domain

ICANN --> To start new domain i.e., top level domain  .telugu domain we need to approach ICANN. I need to complete all the process

domain registars(mediators) --> godaddy, hostinger, aws, gcp, azure

https://en.wikipedia.org/wiki/List_of_Internet_top-level_domains

Create Domain using hostinger
Domain -- raj82s.online

Register the domain in AWS using hosted zone
Copy the nameservers from AWS and update/change nameservers in Hostinger

change in NS --> Hostinger updates the change of Nameservers to .online TLD
now aws manages my domain

Hostinger updates Radix Registry(Top level TLD) about raj82s.online --> who bought this domain and nameservers

nameservers = who managed this domain = records to the DNS

A record = IP address

Create A record for backend and DB with Private IP
Create A record for frontend with public IP

DB A record       -- mysql.raj82s.online
backend A record  -- backend.raj82s.online
frontend A record -- raj82s.online

mysql.raj82s.online --> DNS resolver --> .online TLD --> provides nameservers to raj82s.online --> mysql.raj82s.online A record

nslookup -- to check the domain

Record types
=============
A --> points to IP address
CNAME --> points to another domain
MX --> mail records (info@joindevops.com)
TXT --> Domain ownership validaton purpose
NS --> nameservers
SOA --> who is the authority of this domain

What happens when we book domain?
What happens when someone enter our domain in browser?
How to become TLD?

[Unit]
Description = Backend Service

[Service]
User=expense
Environment=DB_HOST="mysql.raj82s.online"
ExecStart=/bin/node /app/index.js
SyslogIdentifier=backend

[Install]
WantedBy=multi-user.target


proxy_http_version 1.1;

location /api/ { proxy_pass http://backend.raj82s.online:8080/; }

location /health {
  stub_status on;
  access_log off;
}

http://raj82s.online/api/transaction

http://backend.raj82s.online:8080/transaction


http://raj82s.online/api/transaction --> send request to backend --> backend responds with data

inode, symlink/softlink and hardlink

what is inode?

inode stores the file type(file or folder), permissions, ownership, file size, timestamp, disk location(memory location)

lrwxrwxrwx  1 root root    11 Dec 26 03:10 DbConfig1.js -> DbConfig.js
l represents link file

symlink is like shortcut it points to the original file. symlink inode and actual file inode is different. symlink breaks when actual file is deleted. symlink can be created to folders/directories

hardlink inode is same as actual file. hardlink is useful for backup of the file. if original file is deleted hardlink remains same. we can't create hardlinks to folders/directories

how do you findout hardlinks for a particular file?

find / -inum "<inode-number>"

-------------------------------------------------------------------------------------------------------------------------------------------------
session 16 
-------------------------------------------------------------------------------------------------------------------------------------------------
Shell disadvantages
======================
Error Handling
Not idempotent
Homogenous --> only works for a particular distro
Not scalable to many servers
Password security
syntax is not easy

user: ec2-user
Pwd: DevOps321
AMI Image: RHEL devops-practice

ssh ec2-user@Public-IP
ssh connection will not work with private IP

ssh ec2-user@98.81.90.117 'echo "Hello Word" > /tmp/hello.txt'

What is configuration management
Configuration Management tools --> Chef, puppet, rundeck, Ansible
Ansible architecture
push vs pull
Ansible Installation
----------------------
sudo dnf install ansible -y

Ansible uses SSH protocol, no need of agent i.e agentless
Ansible also implmented pull based for few usecases.

XML vs JSON vs YAML

adhoc commands
====================
ansible all -i <IP>, -e ansible_user=ec2-user -e ansible_password=DevOps321 -m ping

ansible all -i <PrivateIP>, -e ansible_user=ec2-user -e ansible_password=DevOps321 -m ping  --- Use Private IP or Public IP when connecting  from AWS instance to AWS instance

ansible all -i <PublicIP>, -e ansible_user=ec2-user -e ansible_password=DevOps321 -m ping --- Use Public IP when connecting  from External instance to AWS instance

ansible all -i 172.31.23.37, -e ansible_user=ec2-user -e ansible_password=DevOps321 -m dnf -a "name=nginx state=installed" -b

ansible all -i 172.31.23.37, -e ansible_user=ec2-user -e ansible_password=DevOps321 -m service -a "name=nginx state=started" -b

Playbook
---------

ansible-playbook -i inventory.ini -e ansible_user=ec2-user -e ansible_password=DevOps321 01-playbook.yaml

git pull --- pull the changes from github

-------------------------------------------------------------------------------------------------------------------------------------------------
session 17
-------------------------------------------------------------------------------------------------------------------------------------------------
Ansible Multiple Plays

Types of Variables
	Play 
	Task
	Files
	Prompt
	Inventory
	command line or args
Data types
Conditions

variable have a name we can define, it can hold value. You can use it wherever you want. if you change the value it will reflect everywhere. it is DRY
In shell script:
COURSE=DevOps
$COURSE or ${COURSE}

vars:
    COURSE: "DevOps with AWS"
    DURATION: 120HRS
    TRAINER: Sivakumar
	
In Ansible
"{{COURSE}}"

#1. Command line or args
#2. Task level
#3. Files
#4. Prompt
#5. Play
#6. Inventory
#7. Roles

Using -e to pass extra vars
ansible -u carol -e 'ansible_user=brian' -a whoami all

 ansible-playbook -i inventory.ini 11-vars-args.yaml -e 'COURSES="Devops with AWS"' -e DURATIONTime=120HRS -e TRAINERS=RajasekharReddy

 ansible-playbook -i inventory.ini 11-vars-args.yaml -e "COURSES='Devops with AWS'" -e "DURATIONTime=120HRS" -e "TRAINERS=Rajasekhar"
 
  ansible-playbook -i inventory.ini 11-vars-args.yaml -e "COURSES='Devops with AWS'" -e DURATIONTime=120HRS -e TRAINERS=RajasekharReddy
 
  ansible-playbook -i inventory.ini 11-vars-args.yaml -e COURSES="Devops with AWS" -e DURATIONTime=120HRS -e TRAINERS=Rajasekhar  -- wrong output becuase of space
  need to use both double and single quotes
  
 Ansible challenge : Files is a reserved word and ansible won't work as expected  if used as variable value
vars:
    DURATION: Files
-------------------------------------------------------------------------------------------------------------------------------------------------
session 18
------------------------------------------------------------------------------------------------------------------------------------------------- 
https://techviewleo.com/list-of-ansible-os-family-distributions-facts/
 
Loops
Filters
No Functions in ansible use filters
Ansible facts

ANSIBLE_DISPLAY_SKIPPED_HOSTS=false ansible-playbook -i inventory.ini 14-conditions.yaml

for ipaddr install python library 'netaddr'
To install python packages use pip
pip3.9 install netaddr

shell and command modules
ansible.builtin.shell vs ansible.builtin.command
shell --> it is like you are logging inside the server and executing command... We can access variables, we can use redirections, we can use pipes
command --> this is like running commands from outside, you will not get access to shell variables, redirections, pipes, etc.
simple command --> you can use command module, it is more secure. shell is for complex commands and less secure

Expense MySQL setup using ansible 

install cryptography,PyMySql packages using pip 3.9 

ansible-playbook -i inventory.ini mysql.yaml
Mysql fails with erroe if db root user password is not configured

fatal: [172.31.20.49]: FAILED! => {"changed": false, "msg": "unable to connect to database using pymysql 1.1.1, 
check login_user and login_password are correct or /root/.my.cnf has the credentials. 
Exception message: (1130, \"Host 'ip-172-31-20-49.ec2.internal' is not allowed to connect to this MySQL server\")"}

-------------------------------------------------------------------------------------------------------------------------------------------------
session 19
-------------------------------------------------------------------------------------------------------------------------------------------------
 Expense Backend(Nodejs) setup using ansible
 
 ansible-playbook -i inventory.ini backend.yaml
 
  Expense Fronend(Nginx) setup using ansible

 ansible-playbook -i inventory.ini frontend.yaml

mysql -h backend.raj82s.online -u root -pExpenseApp@1

Failed after creating A record with error 

rajasekhar@ManDev:~/GitHub/DAWS-2025-82S/repos/04-expense-ansible$  nslookup frontend.raj82s.online
Server:         10.255.255.254
Address:        10.255.255.254#53

** server can't find frontend.raj82s.online: NXDOMAIN

The above error is thrown when A record is still not updated

ansible.cfg file

-------------------------------------------------------------------------------------------------------------------------------------------------
session 20
-------------------------------------------------------------------------------------------------------------------------------------------------
Ansible Roles

ansible-playbook mysql.yaml -- no need to use -i to mention inventory file because it is configured in ansible.cfg file
code reuse
DRY --> Don't repeat yourself
A standard structure of writing playbooks that contains tasks, variables, dependencies, files, templates, libraries. We can reuse roles.

roles/role-name

tasks --> You can keep all your tasks here, ansible automatically loads them
	main.yaml 
vars --> variables required for this role
	main.yaml
templates --> you can keep variables in the file, ansible replace the value at runtime.
	any file
files --> We can keep files in this folder
	any file names
Handlers --> notifiers when some change event is happened
defaults/         #
	main.yml      #  <-- default lower priority variables for this role
meta  --> dependencies of this role
	main.yaml
library/          # roles can also include custom modules
	
An exception occurred during task execution. To see the full traceback, use -vvv. The error was: If you are using a module and expect the file to exist on the remote, see the remote_src option
fatal: [backend.daws82s.online]: FAILED! => {"changed": false, "msg": "Could not find or access 'backend.service'\nSearched in:\n\t/home/ec2-user/expense-ansible-roles/roles/backend/files/backend.service\n\t/home/ec2-user/expense-ansible-roles/roles/backend/backend.service\n\t/home/ec2-user/expense-ansible-roles/roles/backend/tasks/files/backend.service\n\t/home/ec2-user/expense-ansible-roles/roles/backend/tasks/backend.service\n\t/home/ec2-user/expense-ansible-roles/files/backend.service\n\t/home/ec2-user/expense-ansible-roles/backend.service on the Ansible Controller.\nIf you are using a module and expect the file to exist on the remote, see the remote_src option"}

ansible handlers are notifiers. when some change event happened in one task, we can trigger other tasks through handlers

ansible-playbook mysql.yaml
ansible-playbook backend.yaml
ansible-playbook frontend.yaml

deployment
===========
there will be one folder where code exist
stop the server
remove old code
download new code
restart the server

1. remove directory
2. re create directory
3. download code

How do you controll tasks in ansible.. few tasks should run, few tasks should not run...

ansible tags
ansible-playbook backend.yaml -t deployment
ansible-playbook frontend.yaml -t deployment
-------------------------------------------------------------------------------------------------------------------------------------------------
session 21
-------------------------------------------------------------------------------------------------------------------------------------------------
create AWS IAM user for ansible with access key and admin role

aws cli needs to be installed

aws configure  -- configure this ansible server
[ ec2-user@ip-172-31-19-238 ~/03-ansible ]$ aws configure

Expense ec2 and route53 creation using ansible
A record creation using ansible

ansible-playbook 22-create-ec2-r53.yaml  -i inventory.ini

Ansible vault

ansible-vault  view /home/rajasekhar/GitHub/DAWS-2025-82S/repos/05-expense-roles/roles/mysql/vars/vault.yaml --ask-vault-pass
admin123

--ask-vault-pass
--vault-password-file

ansible-playbook mysql.yaml --ask-vault-pass
ansible-playbook mysql.yaml --vault-password-file

ansible.cfg file
-------------------
[defaults]

inventory      = inventory.ini
#vault_password_file = /home/ec2-user/mysql_vault_pass
ask_vault_pass = True

de commissiong ansible vault and replace with secret manager or paramter store
secret manager is more cost than parameter store
ansible aws ssm parameter
-------------------------------------------------------------------------------------------------------------------------------------------------
session 22 - PENDING
-------------------------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------------------------
session 23
-------------------------------------------------------------------------------------------------------------------------------------------------
ssh connection with key in ansible.cfg

terraform
-----------
shell, ansible, terraform,sql, perl, customised scriptings
1. syntax --> variables, data types, conditions, functions and loops, error handling
2. process understanding

CRUD --> Ansible is failed to manage the infrastrucutre. For example if some manual edits happen ansible can't recognise those.
It creates duplicate resources. So ansible is not perfect in state management

Ansible --> with in the server, Ansible is perfect

Manual infra
=============
1. time
2. human errors
3. cost
4. reusable effort
5. don't know who did mistake
6. modifications are not easy
7. not scalable

IaaC --> Infra as a code

version control --> you can version control your infra. expense-infra-1.0 expense-infra-2.0
restore if something goes wrong --> easy to restore if something goes wrong
Consistent infra --> you can create same infra across all environments
Inventory management --> you can understand the resources by seeing terraform files
dependency management --> terraform can understand the dependency between resources. First it will create dependencies and then actual resources
code reusability --> terraform modules, you can create similar infra for any number of projects using modules
Cost --> automation of CRUD --> we can save costs
state management
declarative --> easy syntax
Git --> you can review code before apply

terraform manual Installation
Install AWS CLI in windows
aws configure

aws s3  ls

ansible modules
terraform providers --> provider means, a system which terraform can connect and create resources

terraform aws provider
terraform file extensions are .tf
terraform uses HCL --> Hashicorp configuration language

resource "type-of-resource" "name-of-resource" {
	your-parameters
}

resource "aws_instance" "this" {

}

terraform init   --- Downloads and install provider
terraform fmt    --- format the files properly
terraform validate --- validate the configuration
terraform plan
terraform apply  --- to create resources
terraform apply -auto-approve --- to create resources without confirmation
terraform destroy  --- to destroy resources
terraform destroy -auto-approve  --- to destroy resources without confirmation 

terraform show  --- Inspect the current state
terraform state list ---  to list the resources in your project's state



