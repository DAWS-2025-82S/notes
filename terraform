https://www.terraform-best-practices.com/naming
https://developer.hashicorp.com/terraform/tutorials/aws-get-started/aws-change
https://developer.hashicorp.com/terraform/language/style
https://github.com/terraform-aws-modules/terraform-aws-alb  -- open source modules
https://aws.amazon.com/marketplace/pp/prodview-y3m73u6jd5srk?applicationId=AWS-EC2-Console&ref_=beagle&sr=0-1
https://openvpn.net/as-docs/aws-ec2.html#connect-to-your-new-ami-76631

https://developer.hashicorp.com/terraform/tutorials/aws/aws-rds  --- conatains steps to create resources
https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/db_instance  -- syntax for the resources
https://github.com/terraform-aws-modules/terraform-aws-rds -- open source module for resources


required_providers
provider
cidr_blocks
output
locals
count base loop -- to loop list
for_each loop -- to loop map
backend block -- for s3 bucket and DynamoDB configuration to store and secure state file
create DynamoDB table with Partition Key as "LockID" other it will fail for other partition key
dynamic blocks
provisioners
connection block -- to connect to the server created using connection details
multiple env using
1. tfvars
2. workspaces
3. maintain different repos for diff environment
lookup() -- function to lookup(get) a value in map
terraform modules
validation block to validate variables
slice function -- to get values from list
VPC
referring  git terraform module
join function -- convert list to string
split function --- convert to list
load balancer
target group
AutoScaling
Launch template
app load balancer
terrafrom-aws-alb  --- opensource module
Listener and Rules
create listener with fixed response(Without target group)
create alias of route 53 record for load balancer since LB will not have IP
VPN
file function -- to read file

Terraform resources
--------------------
aws_instance
aws_security_group
ingress
egress
aws_route53_record
aws_vpc
aws_internet_gateway
aws_subnet
aws_eip
aws_nat_gateway
aws_route_table
aws_route
aws_route_table_association
aws_vpc_peering_connection
aws_ssm_parameter  -- to upload terrafrom output to centralised location
aws_security_group_rule
terrafrom-aws-alb -- open source modules
aws_lb_listener
aws_key_pair --- to upload public key while creating new instance
aws_db_subnet_group -- subnet group for RDS(MYSQL) DB creation
terraform-aws-rds  -- to create rds(MYSQL) DB

data sources
--------------
aws_ami
aws_vpc
aws_instance
aws_availability_zones
aws_route_table


-------------------------------------------------------------------------------------------------------------
terraform commands
-------------------------------------------------------------------------------------------------------------
terraform init   --- Downloads and install provider
terraform fmt    --- format the files properly
terraform validate --- validate the configuration
terraform plan
terraform apply  --- to create resources
terraform apply -auto-approve --- to create resources without confirmation
terraform destroy  --- to destroy resources
terraform destroy -auto-approve  --- to destroy resources without confirmation 

terraform show  --- Inspect the current state
terraform state list ---  to list the resources in your project's state

// By default terraform will load vars from *.auto.tfvars and terraform.tfvars files
// If the file name  is different to load vars from different file name use -var-file=<filename> option
// terraform plan -var-file=test.tfvars
// terraform apply -var-file=test.tfvars

command line var:
-----------------
terraform plan -var "instance_type=t3.large"
terraform plan -var "instance_type=t3.large" -var "from_port=99"

env var:
--------
export TF_VAR_instance_type="t3.xlarge"
unset TF_VAR_instance_type

If you wish to attempt automatic migration of the state, use
		terraform init -migrate-state
If you wish to store the current configuration with no changes to the state, use 
		terraform init -reconfigure
		
For dev:

terraform init -backend-config=dev/backend.tf -reconfigure
terraform plan -var-file=dev/dev.tfvars
terraform apply -auto-approve -var-file=dev/dev.tfvars
terraform destroy -auto-approve -var-file=dev/dev.tfvars

For Prod:
terraform init -backend-config=prod/backend.tf -reconfigure
terraform plan -var-file=prod/prod.tfvars
terraform apply -auto-approve -var-file=prod/prod.tfvars
terraform destroy -auto-approve -var-file=prod/prod.tfvars		

-------------------------------------------------------------------------------------------------------------
variables
-------------------------------------------------------------------------------------------------------------
varaibles can be accessed by using
var.<VariableName>

Resources can be accessed by using
<ResourceType>.<ResourceName>.<Attributes>

Data sources can be accessedd by using
data.<DataSourceType>.<DataSourceName>.<Attributes>

locals can be accessedd by using
local.<VariableName>


Output will be print by using output block

// print var value
output  "variable_output" {
  value       = var.<VariableName>
}
// print resource output
output  "resource_output" {
  value       = <ResourceType>.<ResourceName>.<Attributes>
}
// print DataSource output
output  "datasource_output" {
  value       = data.<DataSourceType>.<DataSourceName>.<Attributes>
}
// print locals variable output
output  "output_local_variable" {
  value  = local.<VariableName>
}
// output multiple variables
output "instance_info" {
  value = {
    instance_id      = data.aws_instance.example.id
    private_ip       = data.aws_instance.example.private_ip
    public_ip        = data.aws_instance.example.public_ip
  }
}

when changed backend configuration
rajas@ManDev MINGW64 /d/GitHub/DAWS-2025-82S/repos/06-terraform/07-remote-state (main)
$   terraform init
Initializing the backend...
╷
│ Error: Backend configuration changed
│
│ A change in the backend configuration has been detected, which may require
│ migrating existing state.
│
│ If you wish to attempt automatic migration of the state, use "terraform
│ init -migrate-state".
│ If you wish to store the current configuration with no changes to the
│ state, use "terraform init -reconfigure".


│ If you wish to attempt automatic migration of the state, use "terraform
│ init -migrate-state".
│ If you wish to store the current configuration with no changes to the
│ state, use "terraform init -reconfigure".

----------------------------------------------------------------------------------------------------------
create DynamoDB table with Partition Key as "LockID" otherwise it will fail for other partition key
-------------------------------------------------------------------------------------------------
$ terraform apply -auto-approve
Acquiring state lock. This may take a few moments...
╷
│ Error: Error acquiring the state lock
│
│ Error message: operation error DynamoDB: PutItem, https response error
│ StatusCode: 400, RequestID:
│ NDIJ4BSVSFP7E0AHFQS7OFKJFBVV4KQNSO5AEMVJF66Q9ASUAAJG, api error
│ ValidationException: One or more parameter values were invalid: Missing the
│ key testpartitionkey in the item
│ Unable to retrieve item from DynamoDB table "82s-state-locking": operation
│ error DynamoDB: GetItem, https response error StatusCode: 400, RequestID:
│ KMBISS2HOHU93J4UDHFOL9ODENVV4KQNSO5AEMVJF66Q9ASUAAJG, api error
│ ValidationException: The provided key element does not match the schema
│
│ Terraform acquires a state lock to protect the state from being written
│ by multiple users at the same time. Please resolve the issue above and try
│ again. For most commands, you can disable locking with the "-lock=false"
│ flag, but this is not recommended.

---------------------------------------------------------
terraform workspaces commands
==============================
terraform.workspace --variable--> prod

terraform workspace new  <workspacename>--- to create new work space
terraform workspace list -- to list workspaces

terraform workspace select <workspacename>  --  to switch workspace
terraform plan
terraform apply -auto-approve

referring  git terraform module instead of local
-------------------------------
    #source = "github.com/DAWS-2025-82S/10-terraform-aws-vpc"
    source = "git::https://github.com/DAWS-2025-82S/10-terraform-aws-vpc.git?ref=main"

to get module updates
terraform get -update

check ec2 creation without security group
check variables -var "varname1=value" 
check renaming terraform.tfvars with different name
